# .github/workflows/release-prod.yml
name: Release → Prod Deploy

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
      - name: Add Flux Credentials Loaded From ENV
        run: composer config http-basic.composer.fluxui.dev "${{ secrets.FLUX_USERNAME }}" "${{ secrets.FLUX_LICENSE_KEY }}"
      - name: Install Dependencies
        run: |
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
          npm install
      - name: Run Pint
        run: vendor/bin/pint
      - name: Run PHPStan
        run: vendor/bin/phpstan analyse --memory-limit=4G

  tests:
    runs-on: ubuntu-latest
    needs: [lint]
    services:
      postgres:
        image: postgres:15
        ports: ['5432:5432']
        env:
          POSTGRES_DB: laravel
          POSTGRES_USER: sail
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd "pg_isready -U sail"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DB_CONNECTION: pgsql
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      DB_DATABASE: laravel
      DB_USERNAME: sail
      DB_PASSWORD: password
      REGISTRATION_ENABLED: true
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          tools: composer:v2
          coverage: xdebug
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      - run: npm ci
      - name: Add Flux Credentials Loaded From ENV
        run: composer config http-basic.composer.fluxui.dev "${{ secrets.FLUX_USERNAME }}" "${{ secrets.FLUX_LICENSE_KEY }}"
      - run: composer install --no-interaction --prefer-dist --optimize-autoloader
      - run: cp .env.example .env
      - run: php artisan key:generate --ansi
      - name: Wait for Postgres to be Ready
        run: |
          until pg_isready -h 127.0.0.1 -p 5432 -U sail; do
            echo "Waiting for Postgres…"
            sleep 1
          done
      - run: npm run build
      - run: php artisan migrate --no-interaction --force
      - run: ./vendor/bin/pest

  build_prod:
    name: build image (prod)
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build . --file Dockerfile --tag elix:prod
      - name: Log in to Docker registry
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ secrets.REGISTRY_URL }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin
      - name: Tag Docker image for registry
        run: docker tag elix:prod ${{ secrets.REGISTRY_URL }}/elix:prod
      - name: Push Docker image to registry
        run: docker push ${{ secrets.REGISTRY_URL }}/elix:prod

  deploy_prod:
    name: deploy prod
    runs-on: ubuntu-latest
    environment: Production
    needs: [build_prod]
    concurrency:
      group: elix-prod
      cancel-in-progress: true
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          port: ${{ secrets.PROD_PORT }}
          password: "${{ secrets.PROD_PASSWORD }}"
          script: "cd ~/services/elix && ./deploy.sh"
