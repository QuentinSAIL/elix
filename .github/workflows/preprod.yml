name: CI + Preprod Deploy

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop, main]

permissions:
  contents: write  # pour le commit Pint éventuel

jobs:
  lint:
    name: tests / lint
    runs-on: ubuntu-latest
    environment: Testing
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'

      - name: Add Flux Credentials Loaded From ENV
        run: composer config http-basic.composer.fluxui.dev "${{ secrets.FLUX_USERNAME }}" "${{ secrets.FLUX_LICENSE_KEY }}"

      - name: Install Dependencies
        run: |
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
          npm install

      - name: Run Pint
        run: vendor/bin/pint

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse --memory-limit=4G

      - name: Commit Pint Changes (only on push)
        if: github.event_name == 'push'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "style: apply Pint code style fixes"
          branch: ${{ github.head_ref || github.ref_name }}
          file_pattern: '*.php'

  tests:
    name: tests / ci
    runs-on: ubuntu-latest
    environment: Testing
    needs: [lint]   # ← n'exécute que si lint OK

    services:
      postgres:
        image: postgres:15
        ports: ['5432:5432']
        env:
          POSTGRES_DB: laravel
          POSTGRES_USER: sail
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd "pg_isready -U sail"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_CONNECTION: pgsql
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      DB_DATABASE: laravel
      DB_USERNAME: sail
      DB_PASSWORD: password
      REGISTRATION_ENABLED: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          tools: composer:v2
          coverage: xdebug

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Node Dependencies
        run: npm ci

      - name: Add Flux Credentials Loaded From ENV
        run: composer config http-basic.composer.fluxui.dev "${{ secrets.FLUX_USERNAME }}" "${{ secrets.FLUX_LICENSE_KEY }}"

      - name: Install PHP Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Copy Environment File
        run: cp .env.example .env

      - name: Generate Application Key
        run: php artisan key:generate --ansi

      - name: Wait for Postgres to be Ready
        run: |
          until pg_isready -h 127.0.0.1 -p 5432 -U sail; do
            echo "Waiting for Postgres…"
            sleep 1
          done

      - name: Build Assets
        run: npm run build

      - name: Run Migrations & Seed (optional)
        run: |
          php artisan migrate --no-interaction --force
          # php artisan db:seed --class=YourSeeder

      - name: Run Tests
        run: ./vendor/bin/pest

  build_preprod:
    name: build image (preprod)
    runs-on: ubuntu-latest
    needs: [tests]     # ← ne tourne que si tests OK
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build . --file Dockerfile --tag elix:preprod

      - name: Log in to Docker registry
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ secrets.REGISTRY_URL }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin

      - name: Tag Docker image for registry
        run: docker tag elix:preprod ${{ secrets.REGISTRY_URL }}/elix:preprod

      - name: Push Docker image to registry
        run: docker push ${{ secrets.REGISTRY_URL }}/elix:preprod

  deploy_preprod:
    name: deploy preprod
    runs-on: ubuntu-latest
    environment: Preprod
    needs: [build_preprod]  # ← ne déploie que si build OK
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    concurrency:
      group: elix-preprod
      cancel-in-progress: true
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          port: ${{ secrets.PROD_PORT }}
          password: "${{ secrets.PROD_PASSWORD }}"
          script: "cd ~/services/elix-preprod && ./deploy.sh"
